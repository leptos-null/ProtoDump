// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SearchRequest.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "SearchRequest.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - SearchRequestRoot

@implementation SearchRequestRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - SearchRequestRoot_FileDescriptor

static GPBFileDescriptor *SearchRequestRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@""
                                                     syntax:GPBFileSyntaxProto2];
  }
  return descriptor;
}

#pragma mark - SearchRequest

@implementation SearchRequest

@dynamic hasQuery, query;
@dynamic hasPageNumber, pageNumber;
@dynamic hasResultPerPage, resultPerPage;
@dynamic hasCorpus, corpus;

typedef struct SearchRequest__storage_ {
  uint32_t _has_storage_[1];
  int32_t pageNumber;
  int32_t resultPerPage;
  SearchRequest_Corpus corpus;
  NSString *query;
} SearchRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescriptionWithDefault fields[] = {
      {
        .defaultValue.valueString = nil,
        .core.name = "query",
        .core.dataTypeSpecific.className = NULL,
        .core.number = SearchRequest_FieldNumber_Query,
        .core.hasIndex = 0,
        .core.offset = (uint32_t)offsetof(SearchRequest__storage_, query),
        .core.flags = GPBFieldRequired,
        .core.dataType = GPBDataTypeString,
      },
      {
        .defaultValue.valueInt32 = 0,
        .core.name = "pageNumber",
        .core.dataTypeSpecific.className = NULL,
        .core.number = SearchRequest_FieldNumber_PageNumber,
        .core.hasIndex = 1,
        .core.offset = (uint32_t)offsetof(SearchRequest__storage_, pageNumber),
        .core.flags = GPBFieldOptional,
        .core.dataType = GPBDataTypeInt32,
      },
      {
        .defaultValue.valueInt32 = 10,
        .core.name = "resultPerPage",
        .core.dataTypeSpecific.className = NULL,
        .core.number = SearchRequest_FieldNumber_ResultPerPage,
        .core.hasIndex = 2,
        .core.offset = (uint32_t)offsetof(SearchRequest__storage_, resultPerPage),
        .core.flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasDefaultValue),
        .core.dataType = GPBDataTypeInt32,
      },
      {
        .defaultValue.valueEnum = SearchRequest_Corpus_Universal,
        .core.name = "corpus",
        .core.dataTypeSpecific.enumDescFunc = SearchRequest_Corpus_EnumDescriptor,
        .core.number = SearchRequest_FieldNumber_Corpus,
        .core.hasIndex = 3,
        .core.offset = (uint32_t)offsetof(SearchRequest__storage_, corpus),
        .core.flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasDefaultValue | GPBFieldHasEnumDescriptor),
        .core.dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SearchRequest class]
                                     rootClass:[SearchRequestRoot class]
                                          file:SearchRequestRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescriptionWithDefault))
                                   storageSize:sizeof(SearchRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_FieldsWithDefault];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Enum SearchRequest_Corpus

GPBEnumDescriptor *SearchRequest_Corpus_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "Universal\000Web\000Images\000Local\000News\000Products"
        "\000Video\000";
    static const int32_t values[] = {
        SearchRequest_Corpus_Universal,
        SearchRequest_Corpus_Web,
        SearchRequest_Corpus_Images,
        SearchRequest_Corpus_Local,
        SearchRequest_Corpus_News,
        SearchRequest_Corpus_Products,
        SearchRequest_Corpus_Video,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(SearchRequest_Corpus)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:SearchRequest_Corpus_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL SearchRequest_Corpus_IsValidValue(int32_t value__) {
  switch (value__) {
    case SearchRequest_Corpus_Universal:
    case SearchRequest_Corpus_Web:
    case SearchRequest_Corpus_Images:
    case SearchRequest_Corpus_Local:
    case SearchRequest_Corpus_News:
    case SearchRequest_Corpus_Products:
    case SearchRequest_Corpus_Video:
      return YES;
    default:
      return NO;
  }
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
